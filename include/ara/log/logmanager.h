/*! 
 *  @file logmanager.h
 *  @brief Head file for declaring class LogManager.
 *  
 *  Copyright (c) by Hinge-Tech R&D Center.\n
 *  Description: declare class LogManager
 *               
 * 
 *  @author Rimon Chen
 *  @version 1.0
 *  @date 2019-07-05
 *  
 *  History:\n
 *  author          time                version         desc\n
 *  Rimon           2019-07-05          1.0             build this moudle\n
 */
#ifndef ARA_LOG_LOGMANAGER_H__
#define ARA_LOG_LOGMANAGER_H__

#include "ara/log/common.h"
#include "ara/log/logger.h"
#include "ara/log/utility.h"

namespace ara
{
namespace log 
{

 /* forward declare LogStream class */
class LogStream;

/*!
 *  @brief The class holding the main logic of the Logging API. 
 *  
 *  @details It handles the registration and
 *   deregistration of the Application process against the Logging back-end and
 *   is responsible for the logger context object’s life time.
 */
class LogManager final
{
  public:
    /*!
     *  @brief the client status at back-end
     */
    enum class ClientState : int8_t 
    {
        kUnknown = -1, /*!< DLT back-end not up and running yet, state cannot be determined */
        kNotConnected, /*!< No remote client detected */
        kConnected     /*!< Remote client is connected */
    };

	/*! 
     *  @brief Initializes the logging framework for the application with given properties.
	 *  
	 *  @details In case the kFile flag is set in logMode, the directory path needs to
     *   be provided. The actual file name will be generated by the Logging
     *   framework.
	 *
     *  @param appId The ID of the Application
     *  @param description Description of the Application
     *  @param logLevel The application’s default log level
     *  @param logMode The log mode(s) to be used, if the LogMode::kFile is specified, the param directoryPath can not be empty
     *  @param directoryPath The directory path for the file log mode
     * 
     *  @return The refrence of the LogManager object
	 *  
	 *  @see ara::log::InitLogging
	 */
    static LogManager& instance(const std::string& appId,
                                const std::string& description,
                                LogLevel logLevel,
                                LogMode logMode,
                                const char* Path) noexcept
    {
        static LogManager inst{appId, description, logLevel, logMode, Path};
        return inst;
    }

	/*! 
     *  @brief Creates a logger, representing a DLT context.
	 *  
     *  @param ctxId The context ID
     *  @param ctxDescription The description of the provided context ID.
     *  @param ctxDefLogLevel The default log level, set to Warning severity if not
     *   explicitly specified.
     * 
     *  @return Reference to the internal managed instance of a Logger object.
     * 
     *  @note Does internally track all created contexts and cares for their deregistration. It also checks
     *   weather requested ID isn’t created yet, and if so it returns the already available logger as
     *   reference.
     * 
	 *  @see ara::log::CreateLogger
	 *  
	 */
    static Logger& createLogContext(const std::string& ctxId,
                                       const std::string& ctxDescription,
                                       LogLevel ctxDefLogLevel) noexcept;
	/*! 
     *  @brief return a default logger, representing a DLT context.
     *  @return Reference to the default internal managed instance of a Logger object.
     */

    static Logger& defaultLogContext() noexcept
    {
        static Logger& logCtx_DEFAULT{createLogContext("DFLT", "default application context", LogLevel::kVerbose)};
        return logCtx_DEFAULT;
    }

	/*! 
     *  @brief Fetches the connection state from the DLT back-end of a possibly available remote client.
	 *  
     *  @return The current client state
	 */
    ClientState RemoteClientState() const noexcept;

  private:
	/*! 
     *  @brief The Constructor of LogManager.
	 *  
     *  @param id The ID of the Application
     *  @param description Description of the Application
     *  @param logLevel The application’s default log level
     *  @param logMode The log mode(s) to be used, if the LogMode::kFile is specified, the param directoryPath can not be empty
     *  @param directoryPath The directory path for the file log mode
     * 
	 *  @see ara::log::InitLogging instance
	 */
    LogManager(const std::string& id,
               const std::string& description,
               LogLevel logLevel,
               LogMode logMode,
               const char* Path) noexcept;

    /*!
     *  @ brief Will unregister remaining log contexts and the application before shutting down.
     */
    void clean();
    
	/*! 
     *  @brief The destructor unregisters remaining log contexts and the application before shutting down.
	 */
    ~LogManager();

	/*! 
     *  @brief Due to this object’s singleton nature the copy/move operators have to be removed by explicitly
     *  deleting them.
	 */
    LogManager(const LogManager&) = delete;
	/*! 
     *  @brief Due to this object’s singleton nature the copy/move operators have to be removed by explicitly
     *  deleting them.
	 */
    LogManager(LogManager&&) = delete;
	/*! 
     *  @brief Due to this object’s singleton nature the copy/move operators have to be removed by explicitly
     *  deleting them.
	 */
    LogManager& operator=(const LogManager&) = delete;
	/*! 
     *  @brief Due to this object’s singleton nature the copy/move operators have to be removed by explicitly
     *  deleting them.
	 */
    LogManager& operator=(LogManager&&) = delete;

	/*! 
     *  @brief Only for test
	 */
    TEST_HELPER
};

} // namespace log
} // namespace ara

#endif // ARA_LOG_LOGMANAGER_H__
